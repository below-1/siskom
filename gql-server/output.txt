about to rewrite db
SELECT pg_catalog.set_config('search_path', '', false);
DROP DATABASE postgres;
SELECT pg_catalog.set_config('search_path', '', false);
CREATE DATABASE postgres OWNER postgres;
CREATE EXTENSION pgcrypto;
CREATE EXTENSION
CREATE DOMAIN TH_AJAR AS SMALLINT NOT NULL CHECK (value >= 2007);
CREATE DOMAIN
CREATE DOMAIN SEMESTER AS SMALLINT NOT NULL CHECK (value = 1 OR value = 2);
CREATE DOMAIN
CREATE DOMAIN HARI AS SMALLINT NOT NULL CHECK (value >= 1 AND value <= 7);
CREATE DOMAIN
CREATE DOMAIN JAM_KUL AS SMALLINT NOT NULL CHECK (value >= 0 AND value <= 24);
CREATE DOMAIN
CREATE TYPE mk_open_in_type AS enum('ganjil', 'genap', 'all');
CREATE TYPE
CREATE TYPE user_type AS enum('mahasiswa', 'dosen', 'admin');
CREATE TYPE
CREATE TYPE user_scope AS enum('mahasiswa', 'dosen', 'kaprodi', 'admin');
CREATE TYPE
CREATE TYPE mk_type AS enum('wajib', 'pilihan', 'umum');
CREATE TYPE
CREATE TYPE non_scheduled_type AS enum('kkn', 'kp', 'ta');
CREATE TYPE
CREATE TYPE dosen_role_type AS enum('pembimbing 1', 'pembimbing 2', 'penguji 1', 'penguji 2');
CREATE TYPE
CREATE TYPE dosen_status AS enum('aktif', 'inaktif');
CREATE TYPE
CREATE TYPE sex_type as enum('laki-laki', 'perempuan');
CREATE TYPE
CREATE TYPE phase_type as enum(
  'registration',
  'scheduling',
  'class_pick',
  'kmb',
  'grading',
  'revise'
);
CREATE TYPE
CREATE TYPE mhs_status_type as enum('lulus', 'aktif', 'drop out', 'cuti');-- common tables.
CREATE TYPE
create table periode (
  id integer primary key generated by default as identity,
  tahun th_ajar not null,
  semester semester not null,
  awal date not null,
  akhir date not null,
  id_ketua integer,
  id_sekretaris integer
);
CREATE TABLE
-- bussiness tables.
create table room (
  nama varchar primary key,
  kapasitas smallint not null default 40
);
CREATE TABLE
create table dosen (
  id integer primary key generated by default as identity,
  nip char(20) not null unique,
  nama varchar not null,
  sex sex_type not null,
  status dosen_status not null default 'aktif'
);
CREATE TABLE
create table mahasiswa (
  id integer primary key generated by default as identity,
  nim char(10) not null unique,
  nama varchar not null,
  sex sex_type not null,
  status mhs_status_type not null default 'aktif',
  tahun_masuk th_ajar,
  biodata jsonb,
  id_pa integer not null
);
CREATE TABLE
create table mata_kuliah (
  id integer primary key generated by default as identity,
  kode varchar not null unique,
  nama varchar not null,
  open_in mk_open_in_type not null,
  tipe_mk mk_type not null,
  min_sks smallint,
  sks smallint not null,
  pref_schedule smallint,
  scheduled boolean not null default true
);
CREATE TABLE
create table prasyarat_mk (
  id_parent integer not null,
  id_child integer not null
);
CREATE TABLE
create table kelas (
  id integer primary key generated by default as identity,
  id_periode integer not null,
  id_mk integer not null,
  label varchar not null
);
CREATE TABLE
create table scheduled_kelas (
  id_kelas integer not null primary key,
  id_dosen integer,
  ruangan varchar,
  hari_kul hari not null,
  waktu_kul time not null,
  total_menit smallint not null,
  kapasitas smallint not null
);
CREATE TABLE
create table mahasiswa_kelas (
  id integer primary key generated by default as identity,
  id_kelas integer not null,
  id_mhs integer not null,
  nilai float,
  data jsonb
);
CREATE TABLE
create table role_dosen_private_kelas (
  id integer primary key generated by default as identity,
  id_kelas_mahasiswa integer not null,
  id_dosen integer not null,
  role varchar not null
);
CREATE TABLE
-- configurations etc tables
create table app_user (
  id integer primary key generated by default as identity,
  target_id integer,
  username varchar not null unique,
  password varchar not null,
  tipe_user user_type not null,
  scopes user_scope[] not null
);
CREATE TABLE
create table periode_mahasiswa (
  id_periode integer not null,
  id_mahasiswa integer not null,
  primary key (id_periode, id_mahasiswa)
);
CREATE TABLE
create table app_settings (
    setting_key varchar not null unique,
    setting_value jsonb not null
);CREATE TYPE setting AS (
CREATE TABLE
  current_periode periode,
  phase phase_type
);
CREATE TYPE
CREATE TYPE info_transkrip AS (
  sks INTEGER,
  sksd INTEGER,
  sksn FLOAT,
  ip FLOAT
);
CREATE TYPE
CREATE TYPE mhs_semester AS (
  id_periode INTEGER,
  label VARCHAR,
  tahun INTEGER,
  semester INTEGER
);
CREATE TYPE
CREATE TYPE mhs_transkrip AS (
  id_kelas INTEGER,
  id_mk INTEGER,
  nama_mk VARCHAR,
  kode_mk VARCHAR,
  label VARCHAR,
  tipe_mk mk_type,
  sks SMALLINT,
  nilai FLOAT,
  huruf_nilai CHAR(2),
  angka_nilai numeric,
  lulus VARCHAR,
  tahun TH_AJAR,
  semester SEMESTER
);
CREATE TYPE
CREATE TYPE sc_mahasiswa_summary AS (
  id_kelas INTEGER,
  label VARCHAR,
  ruangan VARCHAR,
  hari_kul SMALLINT,
  waktu_kul TIME,
  total_menit SMALLINT,
  id_dosen INTEGER,
  nama_dosen VARCHAR,
  nip_dosen CHAR(20),
  id_mk INTEGER,
  nama_mk VARCHAR,
  kode_mk VARCHAR,
  tipe_mk mk_type
);
CREATE TYPE
CREATE TYPE kelas_summary AS (
  id INTEGER,
  id_mk INTEGER,
  id_periode INTEGER,
  label VARCHAR,
  ruangan VARCHAR,
  hari_kul SMALLINT,
  waktu_kul TIME,
  total_menit SMALLINT,
  kapasitas SMALLINT,
  dosen_id INTEGER,
  dosen_nama VARCHAR,
  dosen_nip CHAR(20),
  mk_kode VARCHAR,
  mk_nama VARCHAR,
  tipe_mk mk_type
);
CREATE TYPE
create type app_user_jwt AS (
  id INTEGER,
  username VARCHAR,
  target_id INTEGER,
  role VARCHAR,
  exp INTEGER
);
CREATE TYPE
create type app_user_comp as (
  _mahasiswa mahasiswa,
  _dosen dosen
);
CREATE TYPE
CREATE TYPE mahasiswa_ip as (
  tahun integer,
  semester SEMESTER,
  nilai float
);
CREATE TYPE
CREATE TYPE mahasiswa_periode_info as (
  id integer,
  tahun TH_AJAR,
  semester SEMESTER,
  sks integer,
  sksd integer,
  sksn float
);alter table kelas 
CREATE TYPE
  add constraint unique_kelas_periode unique (id_periode, id_mk, label);
ALTER TABLE
alter table periode
  add constraint periode_ketua_fk foreign key (id_ketua) references dosen (id),
  add constraint periode_sekretaris_fk foreign key (id_sekretaris) references dosen (id);
ALTER TABLE
alter table mahasiswa
  add constraint pa_fk foreign key (id_pa) references dosen (id) on delete restrict;
ALTER TABLE
alter table prasyarat_mk
  add constraint mk_parent_fk foreign key (id_parent) references mata_kuliah (id) on delete cascade,
  add constraint mk_child_fk foreign key (id_child) references mata_kuliah (id) on delete cascade;
ALTER TABLE
alter table kelas
  add constraint kelas_periode_fk foreign key (id_periode) references periode (id) on delete restrict,
  add constraint kelas_mk_fk foreign key (id_mk) references mata_kuliah (id) on delete restrict;
ALTER TABLE
alter table scheduled_kelas
  add constraint schedule_kelas_fk foreign key (id_kelas) references kelas (id) on delete restrict,
  add constraint schedule_dosen_fk foreign key (id_dosen) references dosen (id) on delete restrict,
  add constraint schedule_ruangan_fk foreign key (ruangan) references room (nama) on delete restrict;
ALTER TABLE
alter table mahasiswa_kelas
  add constraint anggota_kelas_fk foreign key (id_kelas) references kelas (id) on delete restrict,
  add constraint anggota_mahasiswa_fk foreign key (id_mhs) references mahasiswa (id) on delete restrict;
ALTER TABLE
alter table mahasiswa_kelas 
  add constraint unique_mahasiswa_kelas unique (id_kelas, id_mhs);
ALTER TABLE
create index "id_kelas__mahasiswa_kelas" on mahasiswa_kelas using btree (id_kelas);
CREATE INDEX
create index "id_mhs__mahasiswa_kelas" on mahasiswa_kelas using btree (id_mhs);
CREATE INDEX
alter table periode_mahasiswa
  add constraint available_periode_fk foreign key (id_periode) references periode (id) on delete restrict,
  add constraint available_mahasiswa_fk foreign key (id_mahasiswa) references mahasiswa (id) on delete cascade;
ALTER TABLE
alter table role_dosen_private_kelas
  add constraint kelas_mahasiswa_role_dosen foreign key (id_kelas_mahasiswa) references mahasiswa_kelas (id) on delete restrict,
  add constraint dosen_role_private_kelas foreign key (id_dosen) references dosen (id) on delete restrict;
ALTER TABLE
CREATE OR REPLACE PROCEDURE new_user(
	_username VARCHAR,
	_password VARCHAR,
	_scopes user_scope[],
	_tipe_user user_type,
	_target_id INTEGER
) LANGUAGE plpgsql AS
$$ BEGIN
	INSERT INTO app_user (username, password, scopes, tipe_user, target_id) 
    VALUES (
        _username,
        crypt(_username, gen_salt('bf')), 
        _scopes,
	     _tipe_user,
        _target_id
    );
END $$;
CREATE PROCEDURE
create or replace function new_dosen(
	_nama varchar, 
	_nip char(20),
	_sex sex_type,
	_in_active_periode boolean
) returns dosen language plpgsql as $$
declare
	_dosen dosen;
	_id_dosen dosen.id%type;
	_id_active_periode periode.id%type;
begin
	insert into dosen (nama, nip, sex) values (_nama, _nip, _sex) RETURNING * into STRICT _dosen;
	select setting_value->>'value' into STRICT _id_active_periode from app_settings where setting_key = 'id_active_periode';
	call new_user(
		_username => _nip, 
		_password => _nip, 
		_scopes => '{dosen}', 
		_tipe_user => 'dosen', 
		_target_id => _dosen.id);
	return _dosen;
end $$;
CREATE FUNCTION
create or replace function new_mahasiswa(
	_nama varchar,
	_nim char(10),
	_th_masuk TH_AJAR,
  _sex sex_type
)
returns mahasiswa.id%type LANGUAGE plpgsql as $$
declare 
	_id_pa mahasiswa.id_pa%type;
	_id_mahasiswa mahasiswa.id%type;
begin
	select id_pa into strict _id_pa from (
		select d.id as id_pa, count(m.nim) as total
	  	from dosen d
    	left join mahasiswa m on m.id_pa = d.id
    	where d.status = 'aktif'
    	group by d.id
    	order by total asc
			limit 1
	) as t;
	insert into mahasiswa (nama, nim, tahun_masuk, id_pa, sex) 
    values (_nama, _nim, _th_masuk, _id_pa, _sex)
    returning id into strict _id_mahasiswa;
	call new_user(_nim, _nim, '{mahasiswa}', 'mahasiswa', _id_mahasiswa);
	return _id_mahasiswa;
end $$;
NOTICE:  type reference mahasiswa.id%TYPE converted to integer
CREATE FUNCTION
create or replace function new_dosen_in_all_periode(
    _nama varchar, 
	_nip char(20),
	_sex sex_type
) 
returns dosen language plpgsql as $$
declare
	_dosen dosen;
	_id_dosen dosen.id%type;
	_id_active_periode periode.id%type;
begin
	insert into dosen (nama, nip, sex) values (_nama, _nip, _sex) RETURNING * into STRICT _dosen;

	select setting_value->>'value' into STRICT _id_active_periode from app_settings where setting_key = 'id_active_periode';
	call new_user(
		_username => _nip, 
		_password => _nip, 
		_scopes => '{dosen}', 
		_tipe_user => 'dosen', 
		_target_id => _dosen.id);
	return _dosen;
end $$;
CREATE FUNCTION
create or replace function remove_prasyarat (
  _id_parent int,
  _id_child int
) returns bigint as $$
    with d as (
      delete from prasyarat_mk where (id_parent = _id_parent and id_child = _id_child) returning *
    )
    select count(*) from d
$$ language sql;
CREATE FUNCTION
create or replace function new_scheduled_class (
  _mk_id int,
  _periode_id int,
  _label varchar,
  _dosen_id int,
  _ruangan varchar,
  _hari_kul HARI,
  _waktu_kul time,
  _total_menit smallint,
  _kapasitas smallint  
) returns int as $$
declare
  _id_kelas kelas.id%type;
  n_overlap int;
begin
  select count(id) into strict n_overlap 
    from list_clash_courses(_periode_id, _dosen_id, _ruangan, _hari_kul, _waktu_kul, _total_menit);
  if n_overlap > 0 then
    RAISE EXCEPTION 'CLASH';
  end if;
  insert into kelas (id_periode, id_mk, label) values (_periode_id, _mk_id, _label) returning id into strict _id_kelas;
  insert into scheduled_kelas 
    (id_kelas, id_dosen, ruangan, hari_kul, waktu_kul, total_menit, kapasitas)
    values (_id_kelas, _dosen_id, _ruangan, _hari_kul, _waktu_kul, _total_menit, _kapasitas);
  return _id_kelas;
end $$ language plpgsql strict;
CREATE FUNCTION
create or replace function update_scheduled_class (
  _id int,
  _dosen_id int,
  _ruangan varchar,
  _hari_kul HARI,
  _waktu_kul time,
  _total_menit smallint,
  _kapasitas smallint
) returns int as $$
declare
  id_periode int;
  n_overlap int;
begin
  select k.id_periode into strict id_periode from kelas k where id = _id;
  select count(id) into strict n_overlap 
    from list_clash_courses(id_periode, _dosen_id, _ruangan, _hari_kul, _waktu_kul, _total_menit);
  if n_overlap > 0 then
    RAISE EXCEPTION 'CLASH';
  end if;
  update scheduled_kelas 
    set 
      id_dosen = _dosen_id,
      ruangan = _ruangan,
      total_menit = _total_menit,
      kapasitas = _kapasitas,
      hari_kul = _hari_kul,
      waktu_kul = _waktu_kul
    where id_kelas = _id;
  return _id;
end $$ language plpgsql strict;
CREATE FUNCTION
create or replace function change_current_phase (
  phase phase_type
) returns phase_type as $$
  insert into app_settings (setting_key, setting_value)
    values ('current_phase', json_build_object('value', phase))
    on conflict (setting_key)
      do update set setting_value = json_build_object('value', phase)
      returning phase;
$$ language sql strict;
CREATE FUNCTION
create or replace function change_current_periode (
  id_periode int
) returns int as $$
begin
  if (id_periode not in (select id from periode)) then
    RAISE EXCEPTION 'unknown_id_periode';
  end if;
  insert into app_settings (setting_key, setting_value)
    values ('id_active_periode', json_build_object('value', id_periode))
    on conflict (setting_key)
      do update set setting_value = json_build_object('value', id_periode);
  return id_periode;
end $$ language plpgsql strict;
CREATE FUNCTION
create or replace function change_nilai (
  _id_mahasiswa int,
  _id_kelas int,
  _nilai float
) returns int as $$
  update mahasiswa_kelas
    set nilai = _nilai
    where 
      id_mhs = _id_mahasiswa
      and id_kelas = _id_kelas
    returning 1
$$ language sql strict;
CREATE FUNCTION
create or replace function remove_mahasiswa_from_kelas (
  _id_mahasiswa int,
  _id_kelas int
) returns int as $$
  delete from mahasiswa_kelas
    where 
      id_mhs = _id_mahasiswa
      and id_kelas = _id_kelas
      returning 1
$$ language sql strict;
CREATE FUNCTION
create or replace function add_mahasiswa_to_kelas (
  _id_mahasiswa int,
  _id_kelas int
) returns int as $$
declare
  _mk mata_kuliah;
  _id_result int;
begin
  -- Check requirement of this mata_kuliah
  -- select mk into strict _mk 
  --   from kelas
  --   join mata_kuliah mk on kelas.id_mk = mk.id;
  -- select * from mata_kuliah mk
  --   join prasyarat_mk pmk on pmk.id_parent = mk.id
  --   where mk.id = _mk.id;
  insert into mahasiswa_kelas (id_kelas, id_mhs, nilai)
    values (_id_kelas, _id_mahasiswa, null)
    returning id into _id_result;
  return _id_result;
end $$ language plpgsql strict;
CREATE FUNCTION
create or replace function huruf_nilai (nilai float)
returns char(2) as $$
  select case
    when nilai >= 80.00 then 'A'
    when nilai >= 77.5 then 'A-'
    when nilai >= 75.0 then 'AB'
    when nilai >= 72.5 then 'B+'
    when nilai >= 70.0 then 'B'
    when nilai >= 67.5 then 'B-'
    when nilai >= 65.0 then 'BC'
    when nilai >= 62.5 then 'C+'
    when nilai >= 60.0 then 'C'
    when nilai >= 57.5 then 'C-'
    when nilai >= 55.0 then 'CD'
    when nilai >= 52.5 then 'D+'
    when nilai >= 50.0 then 'D'
    else 'E'
  end
$$ language sql stable;
CREATE FUNCTION
create or replace function angka_nilai (nilai float)
returns numeric as $$
  select case
    when nilai >= 80.00 then 4.0
    when nilai >= 77.5 then 3.75
    when nilai >= 75.0 then 3.5
    when nilai >= 72.5 then 3.25
    when nilai >= 70.0 then 3.0
    when nilai >= 67.5 then 2.75
    when nilai >= 65.0 then 2.5
    when nilai >= 62.5 then 2.25
    when nilai >= 60.0 then 2.0
    when nilai >= 57.5 then 1.75
    when nilai >= 55.0 then 1.5
    when nilai >= 52.5 then 1.25
    when nilai >= 50.0 then 1.0
    else 0
  end
$$ language sql stable;
CREATE FUNCTION
create or replace function current_periode () 
returns periode as $$
  select p.* from periode p inner join
    (select setting_value->>'value' as vl
      from app_settings 
      where setting_key = 'id_active_periode') d 
      on d.vl::integer = p.id;
$$ language sql stable;
CREATE FUNCTION
create or replace function current_periode_id ()
returns integer as $$
  select (setting_value->>'value')::integer
    from app_settings
    where setting_key = 'id_active_periode'
    limit 1
$$ language sql stable;
CREATE FUNCTION
create or replace function current_user_id () returns integer as $$
  select nullif(current_setting('jwt.claims.id'), '')::integer
$$ language sql stable;
CREATE FUNCTION
comment on function current_user_id is E'@omit execute';
COMMENT
create or replace function current_id_mahasiswa () returns integer as $$
  select
    case
      when tipe_user = 'mahasiswa' then target_id
      else 0
    end
  from app_user where id = current_user_id()
$$ language sql stable;
CREATE FUNCTION
comment on function current_id_mahasiswa is E'@omit execute';
COMMENT
create or replace function current_mahasiswa () returns mahasiswa as $$
  select * from mahasiswa where id = current_id_mahasiswa()
$$ language sql stable;
CREATE FUNCTION
create or replace function current_id_dosen () returns integer as $$
  select
    case
      when tipe_user = 'dosen' then target_id
      else 0
    end
  from app_user where id = current_user_id()
$$ language sql stable;
CREATE FUNCTION
comment on function current_id_dosen is E'@omit execute';
COMMENT
create or replace function current_dosen () returns dosen as $$
  select * from dosen where id = current_id_dosen()
$$ language sql stable;
CREATE FUNCTION
create or replace function current_app_user () returns app_user as $$
  select * from app_user where id = current_user_id()
$$ language sql stable;
CREATE FUNCTION
create or replace function find_mahasiswa(
    _keyword varchar, 
    _tahun_masuk TH_AJAR, 
    _take int
)
returns setof mahasiswa as $$
begin
    select * from _temp_mhs 
        where 
            tahun_masuk = _tahun_masuk 
            and nama ilike (_keyword || '%')
        limit _take;
end $$ language plpgsql stable;
CREATE FUNCTION
create or replace function all_years() returns setof TH_AJAR as $$
    select distinct p.tahun from periode p order by p.tahun asc
$$ language sql stable;
CREATE FUNCTION
create or replace function list_kelas(
  _id_periode periode.id%type
) returns setof kelas_summary as $$
  select 
    k.id, k.id_mk, k.id_periode, k.label,
    sk.ruangan, sk.hari_kul, sk.waktu_kul, sk.total_menit, sk.kapasitas,
    d.id as dosen_id, d.nama as dosen_nama, d.nip as dosen_nip,
    mk.kode as mk_kode, mk.nama as mk_nama, mk.tipe_mk
    from kelas k
    left join mata_kuliah mk on k.id_mk = mk.id
    left join scheduled_kelas sk on sk.id_kelas = k.id
    left join dosen d on sk.id_dosen = d.id
    where k.id_periode = _id_periode
$$ language sql stable;
NOTICE:  type reference periode.id%TYPE converted to integer
CREATE FUNCTION
create or replace function list_clash_courses (
  _id_periode integer,
  _id_dosen integer,
  _ruangan varchar,
  _hari_kul HARI,
  _waktu_kul time,
  _total_menit smallint
) returns setof kelas_summary as $$
  select 
    k.id,
    k.id_mk,
    k.id_periode,
    k.label,
    sk.ruangan,
    sk.hari_kul,
    sk.waktu_kul,
    sk.total_menit,
    sk.kapasitas,
    d.id as id_dosen,
    d.nama as dosen_nama,
    d.nip as dosen_nip,
    mk.kode as mk_kode,
    mk.nama as mk_nama,
    mk.tipe_mk
    from kelas k 
    join scheduled_kelas sk on sk.id_kelas = k.id
    join dosen d on sk.id_dosen = d.id
    join mata_kuliah mk on k.id_mk = mk.id
    where 
      k.id_periode = _id_periode and 
      sk.hari_kul = _hari_kul and
      -- time overlap
      (sk.waktu_kul, 
        sk.waktu_kul + (sk.total_menit * INTERVAL '1 minute')) 
      overlaps 
      (_waktu_kul, 
        _waktu_kul + (_total_menit * INTERVAL '1 minute')) and
      -- Either lecturer is same or room is same
      (
        sk.id_dosen = _id_dosen
        or
        sk.ruangan = _ruangan
      )
$$ language sql stable;
CREATE FUNCTION
create or replace function next_label (
  _id_periode integer,
  _id_mk integer
) returns char as $$
  with d as (
    select count(k.id) as total from 
      kelas k
      join scheduled_kelas sk on sk.id_kelas = k.id
      where 
        k.id_periode = _id_periode and
        k.id_mk = _id_mk
  )
  select chr(ascii('A') + total::smallint) as label from d
$$ language sql stable;
CREATE FUNCTION
create or replace function current_setting () returns setting as $$
  with 
    cp as (select * from current_periode()),
    pr as (select * from app_settings where setting_key = 'current_phase')
    select 
    (cp, (pr.setting_value->>'value')::phase_type)::setting
      from pr, cp
$$ language sql stable;
CREATE FUNCTION
create or replace function scheduled_kelas_mahasiswa (
  _id_mahasiswa integer,
  _id_periode integer
) returns setof sc_mahasiswa_summary as $$
  select 
    k.id,
    k."label",
    sc_kel.ruangan,
    sc_kel.hari_kul,
    sc_kel.waktu_kul,
    sc_kel.total_menit,
    d.id,
    d.nama,
    d.nip,
    mk.id,
    mk.nama,
    mk.kode,
    mk.tipe_mk
    from mahasiswa m
    left join mahasiswa_kelas m_kel on m_kel.id_mhs = m.id
    left join kelas k on m_kel.id_kelas = k.id
    left join scheduled_kelas sc_kel on sc_kel.id_kelas  = k.id
    left join mata_kuliah mk on k.id_mk  = mk.id
    left join dosen d on sc_kel.id_dosen  = d.id
    where m.id = _id_mahasiswa and k.id_periode = _id_periode
    order by sc_kel.hari_kul, sc_kel.waktu_kul
$$ language sql stable;
CREATE FUNCTION
create or replace function attended_periode (_id_mahasiswa integer) returns setof periode as $$
  select p
    from mahasiswa m 
    left join periode_mahasiswa pm on pm.id_mahasiswa  = m.id
    left join periode p on p.id = pm.id_periode 
    where m.id = _id_mahasiswa
    order by p.tahun desc, p.semester desc 
$$ language sql stable;
CREATE FUNCTION
create or replace function transkrip (
  _id_mahasiswa integer, 
  _tahun integer,
  _semester integer,
  _keyword varchar
) returns setof mhs_transkrip as $$
  select 
    k.id,
    mk.id,
    mk.nama, 
    mk.kode,
    k.label,
    mk.tipe_mk, 
    mk.sks, 
    mh_k.nilai, 
    huruf_nilai(mh_k.nilai),
    angka_nilai(mh_k.nilai),
    (case 
      when mh_k.nilai >= 2.0 then 'lulus'
      when mh_k.nilai < 2.0 then 'tidak lulus'
    end) as lulus,
    p.tahun, 
    p.semester
    from mahasiswa m 
    join mahasiswa_kelas mh_k on mh_k.id_mhs  = m.id
    join kelas k on k.id = mh_k.id_kelas
    join mata_kuliah mk on mk.id = k.id_mk 
    join periode p on k.id_periode = p.id
    where 
      m.id = _id_mahasiswa 
      and p.tahun <= _tahun
      and (not (p.tahun::integer = _tahun) or p.semester <= _semester)
      and (
        _keyword is null 
        or (
          mk.nama ilike _keyword || '%'
          or mk.kode ilike _keyword || '%'
        )
      )
    order by p.tahun desc, p.semester desc
$$ language sql stable;
CREATE FUNCTION
create or replace function kelas_in_periode (
  _id_mahasiswa integer, 
  _id_periode integer
) returns setof mahasiswa_kelas as $$
  select mh_k.*
    from mahasiswa m 
    join mahasiswa_kelas mh_k on mh_k.id_mhs  = m.id
    join kelas k on k.id = mh_k.id_kelas
    where m.id = _id_mahasiswa and k.id_periode = _id_periode
$$ language sql stable;
CREATE FUNCTION
create or replace function info_transkrip_kumulatif (
  _id_mahasiswa integer, 
  _tahun integer,
  _semester integer
) returns info_transkrip as $$
  with d as (select
    sum(mk.sks)::integer as sks,
    sum(
      case 
        when mh_k.nilai >= 60.0 then mk.sks
        else 0
      end
    )::integer as sksd,
    sum(mk.sks * angka_nilai(mh_k.nilai))::float as sksn
    from mahasiswa m 
    join mahasiswa_kelas mh_k on mh_k.id_mhs = m.id
    join kelas k on k.id = mh_k.id_kelas
    join mata_kuliah mk on mk.id = k.id_mk
    join periode p on p.id = k.id_periode
    where 
        m.id = _id_mahasiswa
        and p.tahun <= _tahun
        and (not (p.tahun::integer = _tahun) or p.semester <= _semester)
  ) select *, (sksn / sksd)::float as ipk from d
$$ language sql stable;
CREATE FUNCTION
create or replace function info_transkrip_periode (
  _id_mahasiswa integer, 
  _id_periode integer
) returns info_transkrip as $$
  with d as (select
    sum(mk.sks)::integer as sks,
    sum(
      case 
        when mh_k.nilai >= 60.0 then mk.sks
        else 0
      end
    )::integer as sksd,
    sum(mk.sks * angka_nilai(mh_k.nilai))::float as sksn
    from mahasiswa m 
    join mahasiswa_kelas mh_k on mh_k.id_mhs = m.id
    join kelas k on k.id = mh_k.id_kelas
    join mata_kuliah mk on mk.id = k.id_mk
    join periode p on p.id = k.id_periode
    where 
        m.id = _id_mahasiswa
        and p.id = _id_periode
  ) select *, (sksn / sksd)::float as ipk from d
$$ language sql stable;
CREATE FUNCTION
create or replace function kelas_dosen (
  _id_dosen integer,
  _id_periode integer
) returns setof scheduled_kelas as $$
  select 
    sk.*
    from scheduled_kelas sk
    join kelas k on sk.id_kelas = k.id
    join periode p on p.id = k.id_periode
    join dosen d on sk.id_dosen = d.id
    where 
      d.id = _id_dosen
      and p.id = _id_periode
$$ language sql stable;
CREATE FUNCTION
create or replace function kelas_of_mahasiswa (
  _id_mhs integer,
  _id_kelas integer
) returns mahasiswa_kelas as $$
  select *
    from mahasiswa_kelas
    where id_kelas = _id_kelas and id_mhs = _id_mhs
    limit 1
$$ language sql stable;
CREATE FUNCTION
create or replace function schedule_of_dosen (
  _id_periode integer,
  _id_dosen integer
) returns setof scheduled_kelas as $$
  begin
    return query select sc.*
      from scheduled_kelas sc
      join kelas k on sc.id_kelas = k.id
      where sc.id_dosen = _id_dosen
        and k.id_periode = _id_periode;
  end;
$$ language plpgsql stable;
CREATE FUNCTION
create or replace function filtered_kelas (
  _id_periode integer,
  _keyword varchar
) returns setof kelas as $$
  select k.*
    from kelas k
    join mata_kuliah mk on k.id_mk = mk.id
    join periode p on k.id_periode = p.id
    where 
      (mk.nama ilike _keyword || '%'
      or mk.kode ilike _keyword || '%')
      and p.id = _id_periode
$$ language sql stable;
CREATE FUNCTION
create or replace function total_mahasiswa_active_pa_dosen (
  _id_dosen integer
) returns bigint as $$
  select count(*)
    from mahasiswa m 
    where m.id_pa = _id_dosen
$$ language sql stable;
CREATE FUNCTION
create or replace function kelas_schedule_members (
  _id_kelas integer
) returns setof mahasiswa_kelas as $$
  select mh_k.*
    from kelas k
    join mahasiswa_kelas mh_k on mh_k.id_kelas = k.id
    where k.id = _id_kelas
$$ language sql stable;
CREATE FUNCTION
create or replace function calc_mahasiswa_periode_info (
  _id_mahasiswa integer
)  returns setof mahasiswa_periode_info as $$
  select
      p.id,
      p.tahun,
      p.semester,
      sum(mk.sks)::integer as sks,
      sum(
        case 
          when mh_k.nilai >= 60.0 then mk.sks
          else 0
        end
      )::integer as sksd,
      sum(mk.sks * angka_nilai(mh_k.nilai))::float as sksn
      from mahasiswa m 
      join mahasiswa_kelas mh_k on mh_k.id_mhs = m.id
      join kelas k on k.id = mh_k.id_kelas
      join mata_kuliah mk on mk.id = k.id_mk
      join periode p on p.id = k.id_periode
      where 
          m.id = _id_mahasiswa
      group by p.id
$$ language sql stable;
CREATE FUNCTION
-- create or replace function mata_kuliah_mahasiswa (
--   _id_mahasiswa integer
-- ) returns setof mata_kuliah as $$
--   select 
-- $$ language sql stable;
drop role if exists mahasiswa;
DROP ROLE
create role mahasiswa;
CREATE ROLE
drop role if exists dosen;
DROP ROLE
create role dosen;
CREATE ROLE
drop role if exists admin;
DROP ROLE
create role admin;
CREATE ROLE
create or replace function login (
  _username varchar, 
  _password varchar
) returns app_user_jwt as $$
  declare
    _user app_user;
  begin
    select au.* into _user
      from app_user au
      where au.username = _username;

    if _user.password = crypt(_password, _user.password) then
      return (
        _user.id,
        _user.username,
        _user.target_id,
        _user.tipe_user::varchar,
        extract(epoch from now() + interval '7 days')
      )::app_user_jwt;
    else
      return null;
    end if;
  end;
$$ language plpgsql strict security definer;
CREATE FUNCTION
-- all can view app_user data
grant select on app_user to mahasiswa, dosen;
GRANT
grant all privileges on app_user to admin;
GRANT
-- dosen can view all mahasiswa data
grant select on mahasiswa to dosen, mahasiswa;
GRANT
grant all privileges on mahasiswa to admin;
GRANT
-- dosen can view all mahasiswa data
grant select on dosen to mahasiswa, dosen;
GRANT
grant all privileges on dosen to admin;
GRANT
-- all can view periode data
grant select on periode to mahasiswa, dosen;
GRANT
grant all privileges on periode to admin;
GRANT
-- dosen can view periode data
grant select on periode_mahasiswa to dosen, mahasiswa;
GRANT
grant all privileges on periode_mahasiswa to admin;
GRANT
-- all can view mk data
grant select on mata_kuliah to mahasiswa, dosen;
GRANT
grant select on prasyarat_mk to mahasiswa, dosen;
GRANT
grant all privileges on mata_kuliah to admin;
GRANT
grant all privileges on prasyarat_mk to admin;
GRANT
grant select on kelas to dosen, mahasiswa;
GRANT
grant all privileges on kelas to admin;
GRANT
grant select on scheduled_kelas to dosen, mahasiswa;
GRANT
grant all privileges on scheduled_kelas to admin;
GRANT
grant select, insert on mahasiswa_kelas to dosen, mahasiswa;
GRANT
grant select, update on mahasiswa_kelas to dosen;
GRANT
grant all privileges on mahasiswa_kelas to admin;
GRANT
grant select on room to mahasiswa, dosen;
GRANT
grant all privileges on room to admin;
GRANT
grant select on app_settings to mahasiswa, dosen;
GRANT
grant all privileges on app_settings to admin;
GRANT
grant select on role_dosen_private_kelas to dosen, mahasiswa;
GRANT
grant all privileges on role_dosen_private_kelas to admin;
GRANT
-- grant usage, select on all sequences in schema public to admin;
-- grant usage, select on all sequences in schema public to dosen;
-- grant usage, select on all sequences in schema public to mahasiswa;
-- alter table mahasiswa enable row level security;
-- alter table mahasiswa_kelas enable row level security;
-- alter table periode_mahasiswa enable row level security;
-- create policy admin_all_mahasiswa on mahasiswa to admin using (true);
-- create policy admin_all_mahasiswa_kelas on mahasiswa_kelas to admin using (true);
-- create policy admin_all_periode_mahasiswa on periode_mahasiswa to admin using (true);
-- create policy dosen_all_mahasiswa on mahasiswa to dosen using (true);
-- create policy dosen_all_mahasiswa_kelas on mahasiswa_kelas to dosen using (true);
-- create policy dosen_all_periode_mahasiswa on periode_mahasiswa to dosen using (true);
-- -- mahasiswa can update username and password
-- create policy mahasiswa_user_policy
--   on app_user 
--   for update
--   to mahasiswa
--   using (
--     current_id_mahasiswa() = target_id
--     and tipe_user = 'mahasiswa'
--   );
-- -- mahasiswa can change all of its data
-- grant select on mahasiswa to mahasiswa;
-- grant update (nama, sex, biodata) on mahasiswa to mahasiswa;
-- create policy mahasiswa_self_policy
--   on mahasiswa
--   for all
--   to mahasiswa
--   using (
--     current_id_mahasiswa() = mahasiswa.id
--   );
-- grant select on kelas to mahasiswa;
-- grant select on scheduled_kelas to mahasiswa;
-- grant select on mahasiswa_kelas to mahasiswa;
-- grant insert on mahasiswa_kelas to mahasiswa;
-- create policy mahasiswa_kelas_mutation_policy
--   on mahasiswa_kelas 
--    for all
--   to mahasiswa
--   using (
--     current_id_mahasiswa() = mahasiswa_kelas.id_mhs
--   );
-- grant select on periode_mahasiswa to mahasiswa;
-- create policy periode_mahasiswa_self_policy
--   on periode_mahasiswa 
--   for select
--   to mahasiswa
--   using (
--     current_id_mahasiswa() = periode_mahasiswa.id_mahasiswa
--   );
